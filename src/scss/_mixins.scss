@use 'sass:math';
@import 'helpers';

/**
 * Create the base container with responsive width values for each breakpoint
 * @author Ivo Wermelinger @iwe-hi / @ivowermelinger
 *
 * @example 	scss
 * @include create-container();
 *
 */
@mixin create-container() {
  .container {
    width: calc(map-get($settings, container-width) - map-get($settings, vertical-space) * 2);
    max-width: map-get($settings, container-max-width);
    margin: 0 auto;

    @each $key, $value in $container-widths {
      @include respond-to($key) {
        width: $value;
      }
    }
  }
}

/**
 * Create the row with responsive values for each breakpoint and some helper classes
 * @author Ivo Wermelinger @iwe-hi / @ivowermelinger
 *
 * @example 	scss
 * @include create-row(mobile, 768px);
 *
 */
@mixin create-row() {
  .row {
    display: flex;
    flex-flow: row wrap;
    margin-left: math.div(map-get($settings, gutter-width), -2);
    margin-right: math.div(map-get($settings, gutter-width), -2);

    @each $key, $value in $breakpoints {
      @include respond-to($key) {
        @if map-has-key($gutter-widths, $key) {
          margin-left: math.div(map-get($gutter-widths, $key), -2);
          margin-right: math.div(map-get($gutter-widths, $key), -2);
        }

        &-justify-between\@#{$key} {
          justify-content: space-between;
        }

        &-justify-around\@#{$key} {
          justify-content: space-around;
        }

        &-justify-even\@#{$key} {
          justify-content: space-evenly;
        }

        &-no-wrap\@#{$key} {
          flex-flow: column nowrap;
        }

        &-wrap\@#{$key} {
          flex-flow: row wrap;
        }
      }
    }

    &-reverse {
      flex-flow: row-reverse wrap;

      @each $key, $value in $container-widths {
        @include respond-to($key) {
          &\@#{$key} {
            flex-flow: row-reverse wrap;
          }
        }
      }
    }

    &-justify-between {
      justify-content: space-between;
    }

    &-justify-around {
      justify-content: space-around;
    }

    &-justify-even {
      justify-content: space-evenly;
    }

    &-no-wrap {
      flex-flow: column nowrap;
    }
  }
}

/**
 * Create the base grid gr classes with helper classes
 * @author Ivo Wermelinger @iwe-hi / @ivowermelinger
 *
 * @example 	scss
 * @include create-grid-base();
 *
 */
@mixin create-grid-base() {
  $columns-amount: map-get($settings, columns);

  @for $index from 1 through $columns-amount {
    .gr-#{$index} {
      max-width: math.div(100%, $columns-amount) * $index;
      flex-basis: math.div(100%, $columns-amount) * $index;
      flex-direction: column;
      display: block;
      box-sizing: border-box;
      padding-left: math.div(map-get($settings, gutter-width), 2);
      padding-right: math.div(map-get($settings, gutter-width), 2);

      @each $key, $value in $breakpoints {
        @include respond-to($key) {
          @if map-has-key($gutter-widths, $key) {
            padding-left: math.div(map-get($gutter-widths, $key), 2);
            padding-right: math.div(map-get($gutter-widths, $key), 2);
          }
        }
      }
    }

    .prefix-#{$index} {
      margin-left: math.div(100%, $columns-amount) * $index;
    }

    .suffix-#{$index} {
      margin-right: math.div(100%, $columns-amount) * $index;
    }

    .push-#{$index} {
      position: relative;
      left: math.div(100%, $columns-amount) * $index;
      right: auto;
    }

    .pull-#{$index} {
      position: relative;
      right: math.div(100%, $columns-amount) * $index;
      left: auto;
    }

    .order-#{$index} {
      order: $index;
    }
  }

  .show {
    display: unset;
  }

  .hide {
    display: none;
  }

  .no-gutter {
    padding: 0;

    &-left {
      padding-left: 0;
    }

    &-right {
      padding-right: 0;
    }
  }
}

/**
 * Create the gr classes for each breakpoint with helper classes
 * @author Ivo Wermelinger @iwe-hi / @ivowermelinger
 *
 * @example 	scss
 * @include create-grid-states();
 *
 */
@mixin create-grid-states() {
  $columns-amount: map-get($settings, columns);
  @for $index from $columns-amount through 0 {
    @each $key, $value in $breakpoints {
      @include respond-to($key) {
        .gr-#{$index}\@#{$key} {
          max-width: math.div(100%, $columns-amount) * $index;
          width: math.div(100%, $columns-amount) * $index;
          flex-direction: column;
          display: block;
          box-sizing: border-box;
          flex: 0 0 auto;

          @each $key, $value in $breakpoints {
            @include respond-to($key) {
              @if map-has-key($gutter-widths, $key) {
                padding-left: math.div(map-get($gutter-widths, $key), 2);
                padding-right: math.div(map-get($gutter-widths, $key), 2);
              }
            }
          }
        }

        .no-gutter\@#{$key} {
          padding: 0;
        }

        .no-gutter-right\@#{$key} {
          padding-right: 0;
        }

        .no-gutter-left\@#{$key} {
          padding-left: 0;
        }
      }
    }
  }
}

/**
 * Create prefix helper class for every breakpoint
 * @author Ivo Wermelinger @iwe-hi / @ivowermelinger
 *
 * @example 	scss
 * @include create-prefixes();
 *
 */
@mixin create-prefixes() {
  $columns-amount: map-get($settings, columns);

  @for $index from 1 through $columns-amount {
    @each $key, $value in $breakpoints {
      @include respond-to($key) {
        .prefix-#{$index}\@#{$key} {
          margin-left: math.div(100%, $columns-amount) * $index;
        }

        .suffix-#{$index}\@#{$key} {
          margin-right: math.div(100%, $columns-amount) * $index;
        }

        .push-#{$index}\@#{$key} {
          position: relative;
          left: math.div(100%, $columns-amount) * $index;
          right: auto;
        }

        .pull-#{$index}\@#{$key} {
          position: relative;
          right: math.div(100%, $columns-amount) * $index;
          left: auto;
        }
      }
    }
  }
}

/**
 * Create order class for each breakpoint
 * @author Ivo Wermelinger @iwe-hi / @ivowermelinger
 *
 * @example 	scss
 * @include create-order();
 *
 */
@mixin create-order() {
  $columns-amount: map-get($settings, columns);

  @for $index from 1 through $columns-amount {
    @each $key, $value in $breakpoints {
      @include respond-to($key) {
        .order-#{$index}\@#{$key} {
          order: $index;
        }
      }
    }
  }
}

/**
 * Create order class for each breakpoint
 * @author Ivo Wermelinger @iwe-hi / @ivowermelinger
 *
 * @example 	scss
 * @include create-show-and-hide();
 *
 */
@mixin create-show-and-hide() {
  @each $key, $value in $breakpoints {
    @include respond-to($key) {
      .show\@#{$key} {
        display: unset;
      }
      .hide\@#{$key} {
        display: none;
      }
    }
  }
}

/**
 * Add custom classes to each breakpoint
 * @author Ivo Wermelinger @iwe-hi / @ivowermelinger
 * @param 		{String} 		$name 		     The new breakpoint name
 *
 * @example 	scss
 * @include easy-add-class(tal) {
      text-align: left !important;
 };
 *
 */
@mixin easy-add-class($name) {
  .#{$name} {
    @content;
  }

  @each $key, $value in $breakpoints {
    @include respond-to($key) {
      .#{$name}\@#{$key} {
        @content;
      }
    }
  }
}