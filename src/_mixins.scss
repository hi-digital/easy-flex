@use "sass:math";

@mixin create-container() {
  .container {
    width: $container-width;
    max-width: $container-max-width;
    margin: 0 auto;

    @each $key, $value in $container-widths {
      @include respond-to($key) {
        width: $value;
      }
    }
  }
}

@mixin create-row($driver: 'grid') {
  @if $driver == 'grid' {
    .row {
      display: grid;
      grid-template-columns: repeat($columns-amount, 1fr);
      grid-column-gap: $gutter-width;
    }
  } @else {
    .row {
      display: flex;
      flex-flow: row wrap;


      &--reverse {
        flex-flow: row-reverse wrap;

        @each $key, $value in $container-widths {
          @include respond-to($key) {
            &\@#{$key} {
              flex-flow: row-reverse wrap;
            }
          }
        }
      }
    }
  }
}

@mixin create-grid-base($driver: 'grid') {
  @for $index from 1 through $columns-amount {
    @if $driver == 'grid' {
      .gr-#{$index} {
        grid-column: auto / span $index;
        border: 1px solid $grid-color;
      }

      .start-#{$index} {
        grid-column-start: $index;
      }

    } @else {
      .gr-#{$index} {
        max-width: math.div(100%, $columns-amount) * $index;
        flex-basis: math.div(100%, $columns-amount) * $index;
        flex-direction: column;
        display: block;
        border: 1px solid $grid-color;
      }

      .prefix-#{$index} {
        margin-left: math.div(100%, $columns-amount) * $index;
      }
    }

    .order-#{$index} {
      order: $index;
    }
  }

  .show {
    display: unset;
  }

  .hide {
    display: none;
  }
}

@mixin create-grid-states($driver: 'grid') {
  @for $index from 1 through $columns-amount {
    @each $key, $value in $breakpoints {
      @include respond-to($key) {
        @if $driver == 'grid' {
          .gr-#{$index}\@#{$key} {
            grid-column: auto / span $index;
            border: 1px solid $grid-color;
          }
        } @else {
          .gr-#{$index}\@#{$key} {
            max-width: math.div(100%, $columns-amount) * $index;
            flex-basis: math.div(100%, $columns-amount) * $index;
            flex-direction: column;
            display: block;
            border: 1px solid $grid-color;
          }
        }
      }
    }
  }
}

@mixin create-start() {
  @for $index from 1 through $columns-amount {
    @each $key, $value in $breakpoints {
      @include respond-to($key) {
        .start-#{$index}\@#{$key} {
          grid-column-start: $index;
        }
      }
    }
  }
}

@mixin create-prefixes() {
  @for $index from 1 through $columns-amount {
    @each $key, $value in $breakpoints {
      @include respond-to($key) {
        .prefix-#{$index}\@#{$key} {
          margin-left: math.div(100%, $columns-amount) * $index;
        }

        .suffix-#{$index}\@#{$key} {
          margin-right: math.div(100%, $columns-amount) * $index;
        }

        .push-#{$index}\@#{$key} {
          position: relative;
          left: math.div(100%, $columns-amount) * $index;;
          right: auto;
        }

        .pull-#{$index}\@#{$key} {
          position: relative;
          right: math.div(100%, $columns-amount) * $index;
          left: auto;
        }
      }
    }
  }
}

@mixin create-order() {
  @for $index from 1 through $columns-amount {
    @each $key, $value in $breakpoints {
      @include respond-to($key) {
        .order-#{$index}\@#{$key} {
          order: $index;
        }
      }
    }
  }
}

@mixin create-show-and-hide() {
  @each $key, $value in $breakpoints {
    @include respond-to($key) {
      .show\@#{$key} {
        display: unset;
      }
      .hide\@#{$key} {
        display: none;
      }
    }
  }
}

@mixin create-grid($driver) {
  @include create-container();
  @include create-row($driver);
  @include create-grid-base($driver);
  @include create-grid-states($driver);


  @if $driver == 'grid' {
    // Display grid only supports grid-start
    @include create-start();

  } @else {
    // On display flex we work with prefix / suffix and push states
    @include create-prefixes();
  }

  // Helper classes which are the same for both drivers
  @include create-order();
  @include create-show-and-hide();
}